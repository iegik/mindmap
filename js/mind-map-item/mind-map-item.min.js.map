{
  "version": 3,
  "sources": ["../../../src/view.ts", "../../../src/mind-map-item/mind-map-item.ts"],
  "sourcesContent": ["class Ref {\n  toString() {\n    const id = Math.round(Math.random() * 1000000).toString(36);\n    return (this.id = this.id || `ref-${id}`);\n  }\n  get current() {\n    return document.querySelector(`[ref=${this.id}]`);\n  }\n}\n\nexport const createRef = () => new Ref();\n\nexport function useRef() {\n  this.ref = this.ref || new Ref();\n  return this.ref;\n}\n", "import { createRef } from '@app/view';\nimport ui from '@app/l18n/ui.json';\n\ninterface IMindMapItem extends IComponent {\n  button: IButton;\n  card: ICard;\n  content: string;\n  onAddChild?: (event: MouseEvent) => void;\n  onAddSibling?: (event: MouseEvent) => void;\n  onRemoveChild?: (event: MouseEvent) => void;\n  onMoveChild?: (event: MouseEvent) => void;\n  onChange?: (event: KeyboardEvent) => void;\n  hasParent: boolean;\n  allowNext: boolean;\n  itemId: number;\n  draggable?: boolean;\n}\n\nconst MindMapItem = (props: IMindMapItem) => {\n  const {\n    children,\n    value,\n    button: Button,\n    card: Card,\n    text: Text,\n    onAddChild,\n    onAddSibling,\n    onRemoveChild,\n    onMoveChild,\n    onChange,\n    hasParent,\n    allowNext,\n    itemId,\n    draggable = false,\n  } = props;\n  const ref = createRef();\n  const subitems = Array.isArray(children)\n    ? children.join('')\n    : children || '';\n\n  setTimeout(() => {\n    if (draggable && onMoveChild) {\n      ref.current.addEventListener('dragstart', (e) => {\n        e.dataTransfer.setData(\n          'text/plain',\n          JSON.stringify({ itemId }),\n        );\n      });\n      ref.current.addEventListener('drop', onMoveChild);\n    }\n  });\n\n  const controls = [];\n  if (hasParent)\n    controls.push(\n      Button({\n        children: ui.add_subnode,\n        title: ui.add_subnode_title,\n        className: 'mindMapItem__addSubNode',\n        onClick: onAddSibling,\n      }),\n    );\n\n  if (allowNext)\n    controls.push(\n      Button({\n        children: ui.add_node,\n        title: ui.add_node_title,\n        className: 'mindMapItem__addNode',\n        onClick: onAddChild,\n      }),\n    );\n\n  if (allowNext)\n    controls.push(\n      Button({\n        children: ui.remove_node,\n        title: ui.remove_node_title,\n        className: 'mindMapItem__removeNode',\n        onClick: onRemoveChild,\n      }),\n    );\n\n  const card = Card({\n    children: [\n      Text({\n        value,\n        onChange,\n        multiline: true,\n        className: 'mindMapItem__input',\n      }),\n      ...controls,\n    ],\n  });\n\n  return `\n    <div class=\"mindMapItem\">\n      <div class=\"mindMapItem__value\" ref=\"${ref}\"  draggable=\"${draggable}\">\n        ${card}\n      </div>\n      <div class=\"mindMapItem__dropArea\"></div>\n      <div class=\"mindMapItem__subitems\">\n        ${subitems}\n      </div>\n    </div>\n  `;\n};\n\nexport default MindMapItem;\n"],
  "mappings": "MAAA,WAAU,CACR,UAAW,CACT,GAAM,GAAK,KAAK,MAAM,KAAK,SAAW,KAAS,SAAS,IACxD,MAAQ,MAAK,GAAK,KAAK,IAAM,OAAO,OAElC,UAAU,CACZ,MAAO,UAAS,cAAc,QAAQ,KAAK,SAIlC,EAAY,IAAM,GAAI,kPCQnC,GAAM,GAAc,AAAC,GAAwB,CAC3C,GAAM,CACJ,WACA,QACA,OAAQ,EACR,KAAM,EACN,KAAM,EACN,aACA,eACA,gBACA,cACA,WACA,YACA,YACA,SACA,YAAY,IACV,EACE,EAAM,IACN,EAAW,MAAM,QAAQ,GAC3B,EAAS,KAAK,IACd,GAAY,GAEhB,WAAW,IAAM,CACf,AAAI,GAAa,GACf,GAAI,QAAQ,iBAAiB,YAAa,AAAC,GAAM,CAC/C,EAAE,aAAa,QACb,aACA,KAAK,UAAU,CAAE,cAGrB,EAAI,QAAQ,iBAAiB,OAAQ,MAIzC,GAAM,GAAW,GACjB,AAAI,GACF,EAAS,KACP,EAAO,CACL,SAAU,EAAG,YACb,MAAO,EAAG,kBACV,UAAW,0BACX,QAAS,KAIX,GACF,EAAS,KACP,EAAO,CACL,SAAU,EAAG,SACb,MAAO,EAAG,eACV,UAAW,uBACX,QAAS,KAIX,GACF,EAAS,KACP,EAAO,CACL,SAAU,EAAG,YACb,MAAO,EAAG,kBACV,UAAW,0BACX,QAAS,KAIf,GAAM,GAAO,EAAK,CAChB,SAAU,CACR,EAAK,CACH,QACA,WACA,UAAW,GACX,UAAW,uBAEb,GAAG,KAIP,MAAO;AAAA;AAAA,6CAEoC,kBAAoB;AAAA,UACvD;AAAA;AAAA;AAAA;AAAA,UAIA;AAAA;AAAA;AAAA,KAMH,EAAQ",
  "names": []
}
