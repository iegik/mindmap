{
  "version": 3,
  "sources": ["../../src/whiteboard/whiteboard.ts", "../../src/view.ts", "../../src/button/button.ts", "../../src/card/card.ts", "../../src/text-input/text-input.ts", "../../src/mind-map-item/mind-map-item.ts", "../../src/nested-set.ts", "../../src/main.ts"],
  "sourcesContent": ["interface IWhiteboard extends IComponent {}\n\nconst Whiteboard = (props: IWhiteboard) => {\n  const { children } = props;\n  const subitems = Array.isArray(children)\n    ? children.join('')\n    : children || '';\n\n  return `<div class=\"whiteboard\">${subitems}</div>`;\n};\n\nexport default Whiteboard;\n", "class Ref {\n  toString() {\n    const id = Math.round(Math.random() * 1000000).toString(36);\n    return (this.id = this.id || `ref-${id}`);\n  }\n  get current() {\n    return document.querySelector(`[ref=${this.id}]`);\n  }\n}\n\nexport const createRef = () => new Ref();\n\nexport function useRef() {\n  this.ref = this.ref || new Ref();\n  return this.ref;\n}\n", "import { createRef } from '@app/view';\n\ninterface IButton extends IComponent {\n  onClick?: (event: MouseEvent) => void;\n}\n\nconst Button = (props: IButton) => {\n  const { children, className, title, onClick } = props;\n  const ref = createRef();\n\n  setTimeout(() => {\n    if (onClick) {\n      ref.current.addEventListener('click', onClick);\n    }\n  });\n\n  return `<button class=\"${className} btn\" ref=\"${ref}\" title=\"${title}\">${children}</button>`;\n};\n\nexport default Button;\n", "interface ICard extends IComponent {}\n\nconst Card = (props: ICard) => {\n  const { children, className = '' } = props;\n  const subitems = Array.isArray(children)\n    ? children.join('')\n    : children || '';\n\n  return `<div class=\"${className} card\">${subitems}</div>`;\n};\n\nexport default Card;\n", "import { createRef } from '@app/view';\n\ninterface ITextInput extends IComponent {\n  value?: string;\n  onChange?: (event: KeyboardEvent) => void;\n  multiline?: boolean;\n}\n\nconst TextInput = (props: ITextInput) => {\n  const { value, className = '', onChange, multiline } = props;\n  const ref = createRef();\n\n  setTimeout(() => {\n    if (onChange) {\n      ref.current.addEventListener('input', onChange);\n      ref.current.addEventListener('blur', onChange);\n    }\n  });\n\n  if (multiline) {\n    return `<textarea class=\"${className} text-input text-input--multiline\" ref=\"${ref}\">${value}</textarea>`;\n  }\n\n  return `<input class=\"${className} text-input\" value=\"${value}\" ref=\"${ref}\" />`;\n};\n\nexport default TextInput;\n", "import { createRef } from '@app/view';\nimport ui from '@app/l18n/ui.json';\n\ninterface IMindMapItem extends IComponent {\n  button: IButton;\n  card: ICard;\n  content: string;\n  onAddChild?: (event: MouseEvent) => void;\n  onAddSibling?: (event: MouseEvent) => void;\n  onRemoveChild?: (event: MouseEvent) => void;\n  onMoveChild?: (event: MouseEvent) => void;\n  onChange?: (event: KeyboardEvent) => void;\n  hasParent: boolean;\n  allowNext: boolean;\n  itemId: number;\n  draggable?: boolean;\n}\n\nconst MindMapItem = (props: IMindMapItem) => {\n  const {\n    children,\n    value,\n    button: Button,\n    card: Card,\n    text: Text,\n    onAddChild,\n    onAddSibling,\n    onRemoveChild,\n    onMoveChild,\n    onChange,\n    hasParent,\n    allowNext,\n    itemId,\n    draggable = false,\n  } = props;\n  const ref = createRef();\n  const subitems = Array.isArray(children)\n    ? children.join('')\n    : children || '';\n\n  setTimeout(() => {\n    if (draggable && onMoveChild) {\n      ref.current.addEventListener('dragstart', (e) => {\n        e.dataTransfer.setData(\n          'text/plain',\n          JSON.stringify({ itemId }),\n        );\n      });\n      ref.current.addEventListener('drop', onMoveChild);\n    }\n  });\n\n  const controls = [];\n  if (hasParent)\n    controls.push(\n      Button({\n        children: ui.add_subnode,\n        title: ui.add_subnode_title,\n        className: 'mindMapItem__addSubNode',\n        onClick: onAddSibling,\n      }),\n    );\n\n  if (allowNext)\n    controls.push(\n      Button({\n        children: ui.add_node,\n        title: ui.add_node_title,\n        className: 'mindMapItem__addNode',\n        onClick: onAddChild,\n      }),\n    );\n\n  if (allowNext)\n    controls.push(\n      Button({\n        children: ui.remove_node,\n        title: ui.remove_node_title,\n        className: 'mindMapItem__removeNode',\n        onClick: onRemoveChild,\n      }),\n    );\n\n  const card = Card({\n    children: [\n      Text({\n        value,\n        onChange,\n        multiline: true,\n        className: 'mindMapItem__input',\n      }),\n      ...controls,\n    ],\n  });\n\n  return `\n    <div class=\"mindMapItem\">\n      <div class=\"mindMapItem__value\" ref=\"${ref}\"  draggable=\"${draggable}\">\n        ${card}\n      </div>\n      <div class=\"mindMapItem__dropArea\"></div>\n      <div class=\"mindMapItem__subitems\">\n        ${subitems}\n      </div>\n    </div>\n  `;\n};\n\nexport default MindMapItem;\n", "interface INode {\n  _id: number;\n  lkey: number;\n  rkey: number;\n  depth: number;\n  childs: number;\n  parentId: number;\n  itemId: number;\n}\n\ninterface INestedSet {\n  Structure: INode[];\n  Data: object;\n}\n\nclass NestedSet {\n  constructor() {\n    this.Structure = [];\n    this.Data = {};\n  }\n\n  setItem = (itemId: number, itemData: any) => {\n    this.Data[itemId] = itemData;\n    return this.Data[itemId];\n  };\n\n  getItem = (itemId: number) => this.Data[itemId];\n\n  removeItem = (itemId: number) => {\n    if (this.Data[itemId] !== undefined) {\n      for (var i = 0; i < this.Structure.length; i++) {\n        if (this.Structure[i].itemId === itemId) {\n          this.removeNode(this.Structure[i]._id);\n        }\n      }\n      delete this.Data[itemId];\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  addRoot = (itemId: number) => {\n    if (this.Data[itemId] !== undefined) {\n      this.removeNodes();\n      this.Structure.push({\n        _id: 1,\n        lkey: 1,\n        rkey: 2,\n        depth: 1,\n        childs: 0,\n        parentId: 0,\n        itemId: itemId,\n      });\n    }\n    return this.Structure[0]._id;\n  };\n\n  getRoot = () => this.getNodes()[0];\n\n  getMaxId = () =>\n    this.Structure.reduce(\n      (a, { _id }) => (a > _id ? a : _id),\n      -Infinity,\n    );\n\n  addNode = (targetNodeId: number, itemId: number) => {\n    if (this.Data[itemId] !== undefined) {\n      var parentNode = this.getNode(targetNodeId, true);\n\n      if (!parentNode) {\n        return false;\n      }\n\n      var maxId = this.getMaxId();\n\n      this.Structure = this.Structure.map((n) => {\n        if (n.lkey > parentNode.rkey) {\n          n.lkey += 2;\n          n.rkey += 2;\n        }\n        if (n.rkey >= parentNode.rkey && n.lkey < parentNode.rkey) {\n          n.rkey += 2;\n          n.childs++;\n        }\n        return n;\n      });\n\n      this.Structure.push({\n        _id: maxId + 1,\n        lkey: parentNode.rkey,\n        rkey: parentNode.rkey + 1,\n        depth: parentNode.depth + 1,\n        childs: 0,\n        parentId: parentNode._id,\n        itemId: itemId,\n      });\n\n      return maxId + 1;\n    }\n  };\n\n  getNode = (nodeId: number, asCopy: boolean) => {\n    var selectedNode = this.Structure.filter((n) => n._id === nodeId);\n    if (Array.isArray(selectedNode) && selectedNode.length === 1) {\n      if (asCopy === true) {\n        return { ...selectedNode[0] };\n      } else {\n        return selectedNode[0];\n      }\n    } else {\n      return false;\n    }\n  };\n\n  removeNode = (nodeId: number) => {\n    var selectedNode = this.getNode(nodeId, true);\n    var lengthBranchRem = this.getChilds(nodeId).length + 1;\n\n    if (!selectedNode) {\n      return false;\n    }\n\n    this.Structure = this.getNodes()\n      .map((n) => {\n        if (\n          n.rkey > selectedNode.rkey &&\n          n.lkey < selectedNode.lkey\n        ) {\n          n.childs = n.childs - lengthBranchRem;\n        }\n        return n;\n      })\n      .filter(\n        (n) =>\n          !(\n            n.lkey >= selectedNode.lkey && n.rkey <= selectedNode.rkey\n          ),\n      )\n      .map((n) => {\n        if (n.rkey > selectedNode.rkey) {\n          n.lkey =\n            n.lkey > selectedNode.lkey\n              ? n.lkey - (selectedNode.rkey - selectedNode.lkey + 1)\n              : n.lkey;\n          n.rkey =\n            n.rkey - (selectedNode.rkey - selectedNode.lkey + 1);\n        }\n        return n;\n      });\n\n    return this.Structure;\n  };\n\n  moveNode = (nodeId, targetNodeId) => {\n    var movedNode = this.getNode(nodeId, true);\n    var targetNode = this.getNode(targetNodeId, true);\n\n    var level = movedNode.depth;\n    var rightKey = movedNode.rkey;\n    var leftKey = movedNode.lkey;\n\n    var levelUp = targetNode.depth;\n    var rightKeyNear = targetNode.rkey - 1;\n\n    var skewLevel = levelUp - level + 1;\n    var skewTree = rightKey - leftKey + 1;\n\n    var skewEdit;\n\n    if (rightKeyNear > rightKey) {\n      skewEdit = rightKeyNear - leftKey + 1 - skewTree;\n      this.Structure = this.Structure.map((n) => {\n        if (n.lkey <= rightKeyNear && n.rkey > leftKey) {\n          if (n.rkey <= rightKey) {\n            n.lkey = n.lkey + skewEdit;\n          } else {\n            if (n.lkey > rightKey) {\n              n.lkey = n.lkey - skewTree;\n            }\n          }\n          if (n.rkey <= rightKey) {\n            n.depth = n.depth + skewLevel;\n          }\n          if (n.rkey <= rightKey) {\n            n.rkey = n.rkey + skewEdit;\n          } else {\n            if (n.rkey <= rightKeyNear) {\n              n.rkey = n.rkey - skewTree;\n            }\n          }\n        }\n\n        return n;\n      });\n    } else {\n      skewEdit = rightKeyNear - leftKey + 1;\n      this.Structure = this.Structure.map((n) => {\n        if (n.rkey > rightKeyNear && n.lkey < rightKey) {\n          if (n.lkey >= leftKey) {\n            n.rkey = n.rkey + skewEdit;\n          } else {\n            if (n.rkey < leftKey) {\n              n.rkey = n.rkey + skewTree;\n            }\n          }\n          if (n.lkey >= leftKey) {\n            n.depth = n.depth + skewLevel;\n          }\n          if (n.lkey >= leftKey) {\n            n.lkey = n.lkey + skewEdit;\n          } else {\n            if (n.lkey > rightKeyNear) {\n              n.lkey = n.lkey + skewTree;\n            }\n          }\n        }\n\n        return n;\n      });\n    }\n  };\n\n  getNodes = () => this.Structure.sort((a, b) => a.lkey - b.lkey);\n\n  removeNodes = () => {\n    this.Structure = [];\n  };\n\n  getParent = (nodeId) => {\n    var parents = this.getParents(nodeId);\n    return parents[parents.length - 1] === undefined\n      ? false\n      : parents[parents.length - 1];\n  };\n\n  getParents = (nodeId) => {\n    var parentNode = this.getNode(nodeId, true);\n    if (!parentNode) {\n      return [];\n    } else {\n      return this.getNodes()\n        .filter(\n          (n) => n.lkey < parentNode.lkey && n.rkey > parentNode.rkey,\n        )\n        .map((n) => {\n          n.data = this.Data[n.itemId];\n          return n;\n        });\n    }\n  };\n\n  getChilds = (nodeId, depth) => {\n    var parentNode = this.getNode(nodeId, true);\n    if (!parentNode) {\n      return [];\n    } else {\n      return this.getNodes()\n        .filter(\n          (n) =>\n            n.lkey >= parentNode.lkey &&\n            n.rkey <= parentNode.rkey &&\n            nodeId !== n._id &&\n            (depth === undefined\n              ? true\n              : n.depth <= parentNode.depth + depth),\n        )\n        .map((n) => {\n          n.data = this.Data[n.itemId];\n          return n;\n        });\n    }\n  };\n\n  getBranch = (nodeId) => {\n    var parentNode = this.getNode(nodeId);\n    if (!parentNode) {\n      return [];\n    } else {\n      return this.getNodes()\n        .filter(\n          (n) => n.rkey > parentNode.lkey && n.lkey < parentNode.rkey,\n        )\n        .map((n) => {\n          n.data = this.Data[n.itemId];\n          return n;\n        });\n    }\n  };\n\n  getTree = () =>\n    this.getNodes().map((n) => {\n      n.data = this.Data[n.itemId];\n      return n;\n    });\n\n  clearAll = () => {\n    this.Structure = [];\n    this.Data = {};\n  };\n\n  isRoot = (nodeId) => {\n    var selectedNode = this.getNode(nodeId);\n    return selectedNode && selectedNode.parentId === 0;\n  };\n\n  isBranch = (nodeId) => {\n    var selectedNode = this.getNode(nodeId);\n    return selectedNode && selectedNode.childs > 0;\n  };\n\n  isLeaf = (nodeId) => {\n    var selectedNode = this.getNode(nodeId);\n    return selectedNode && selectedNode.childs === 0;\n  };\n\n  getMaxRightKey = () =>\n    this.Structure.reduce(\n      (a, { rkey }) => (a > rkey ? a : rkey),\n      -Infinity,\n    );\n\n  getMaxLeftKey = () =>\n    this.Structure.reduce(\n      (a, { lkey }) => (a > lkey ? a : lkey),\n      -Infinity,\n    );\n\n  getCountNodes = () => this.Structure.length;\n\n  checkTree = () => {\n    var ruleLeftLessRight = this.Structure.filter(\n      (n) => n.lkey >= n.rkey,\n    );\n    var ruleModKeys = this.Structure.filter(\n      (n) => (n.rkey - n.lkey) % 2 === 0,\n    );\n    var ruleDepth = this.Structure.filter(\n      (n) => (n.lkey - n.depth + 2) % 2 === 1,\n    );\n\n    var errors = [];\n\n    if (ruleLeftLessRight.length !== 0) {\n      errors.push({\n        LeftLessRight: ruleLeftLessRight,\n      });\n    }\n    if (ruleModKeys.length !== 0) {\n      errors.push({\n        ModKeys: ruleModKeys,\n      });\n    }\n    if (ruleDepth.length !== 0) {\n      errors.push({\n        Depth: ruleDepth,\n      });\n    }\n\n    return errors;\n  };\n\n  debug = () =>\n    this.getNodes()\n      .map(\n        (n) =>\n          `${String(' ').repeat(n.depth + 1)}> ${JSON.stringify(\n            this.Data[n.itemId],\n          )}(itemId:${n.itemId}; nodeId:${n._id}; lkey:${\n            n.lkey\n          }; rkey:${n.rkey}; depth:${n.depth}; childs:${n.childs})`,\n      )\n      .join('\\n');\n}\n\nexport default NestedSet;\n", "declare const document: HTMLDocument;\nimport Whiteboard from '@app/whiteboard/whiteboard';\nimport Button from '@app/button/button';\nimport Card from '@app/card/card';\nimport ITextInput from '@app/text-input/text-input';\nimport MindMapItem from '@app/mind-map-item/mind-map-item';\nimport NestedSet from '@app/nested-set';\nimport ui from '@app/l18n/ui.json';\n\nconst tree = new NestedSet();\nlet undoHistory, redoHistory;\n\nconst restoreData = (data?: INestedSet) => {\n  const [Structure = [], Data = {}] = data || [];\n  tree.Structure = Structure;\n  tree.Data = Data;\n};\n\nconst clearHistory = () => {\n  undoHistory = [];\n  redoHistory = [];\n};\n\nconst toBinary = (string) => {\n  const codeUnits = new Uint16Array(string.length);\n  for (let i = 0; i < codeUnits.length; i++) {\n    codeUnits[i] = string.charCodeAt(i);\n  }\n  return btoa(\n    String.fromCharCode(...new Uint8Array(codeUnits.buffer)),\n  );\n};\n\nconst fromBinary = (encoded) => {\n  binary = atob(encoded);\n  const bytes = new Uint8Array(binary.length);\n  for (let i = 0; i < bytes.length; i++) {\n    bytes[i] = binary.charCodeAt(i);\n  }\n  return String.fromCharCode(...new Uint16Array(bytes.buffer));\n};\n\nconst pack = (data) => toBinary(JSON.stringify(data, null, 2));\nconst unpack = (data, alt = '{}') =>\n  JSON.parse(data ? fromBinary(data) : alt);\n\n// window.pack = pack;\n// window.unpack = unpack;\n// window.tree = tree;\n\nlet saveName = 'save';\nconst storageKey = 'mind-map-item';\nconst getStore = () => {\n  const storage = localStorage.getItem(storageKey)\n\n  return unpack(storage, '{}')\n};\n\nconst loadData = () => {\n  const store = getStore() || {}\n  const {\n    [saveName]: savedData,\n  } = store;\n  const { data } = savedData || {};\n\n  return data;\n};\n\nconst saveData = () => {\n  const data = pack([tree.Structure, tree.Data]);\n  undoHistory.push(data);\n  // redoHistory = [];\n  const store = getStore();\n  const {\n    [saveName]: savedData,\n    ...other\n  } = store\n\n  localStorage.setItem(\n    storageKey,\n    pack({ ...other, [saveName]: { data } }),\n  );\n};\n\nconst undo = () => {\n  if (undoHistory.length === 0) return;\n  redoHistory.push(pack([tree.Structure, tree.Data]));\n  restoreData(unpack(undoHistory.pop(), '[]'));\n  render();\n};\n\nconst redo = () => {\n  if (redoHistory.length === 0) return;\n  undoHistory.push(pack([tree.Structure, tree.Data]));\n  restoreData(unpack(redoHistory.pop(), '[]'));\n  render();\n};\n\n(async () => {\n  const keyboardLayoutMap = await navigator.keyboard.getLayoutMap();\n  enum keys {\n    DOM_VK_Z = keyboardLayoutMap.get('KeyZ'),\n  }\n  document.addEventListener('keydown', (e: KeyboardEvent) => {\n    e.stopImmediatePropagation();\n    if (\n      e.key === keys.DOM_VK_Z &&\n      (e.metaKey || e.ctrlKey) &&\n      e.shiftKey\n    )\n      return redo();\n    if (e.key === keys.DOM_VK_Z && (e.metaKey || e.ctrlKey))\n      return undo();\n  });\n})();\n\n// tree.setItem(1, 'Root');\n// tree.setItem(2, 'Type');\n// tree.setItem(3, 'Type2');\n// tree.setItem(4, 'Group');\n// tree.setItem(5, 'Group2');\n// tree.setItem(6, 'SubGroup');\n\n// const root_node_id = tree.addRoot(1);\n// const type_node_id = tree.addNode(root_node_id, 2);\n// const type_node2_id = tree.addNode(root_node_id, 3);\n// const group_node_id = tree.addNode(type_node_id, 4);\n// const group_node2_id = tree.addNode(type_node2_id, 5);\n// const subgroup_node_id = tree.addNode(group_node_id, 6);\n// const subgroup_node_id2 = tree.addNode(group_node2_id, 6);\n\nconst render = () => {\n  document.getElementById('root').innerHTML = Whiteboard({\n    children: [renderTree(tree.getRoot()?.itemId)],\n  });\n\n  // document.getElementById('root').innerHTML += `\n  //   <pre id=\"test\">${tree.debug()}</pre>\n  // `;\n};\n\nconst renderTree = (itemId: number = 1) => {\n  if (!tree.getRoot()) {\n    tree.setItem(itemId, '<new>');\n    tree.addRoot(itemId);\n  }\n  const childs = tree.getChilds(itemId, 1);\n  const value = tree.getItem(itemId);\n  const parent = tree.getParent(itemId);\n\n  return MindMapItem({\n    value,\n    children: childs.map((child: INode) => renderTree(child.itemId)),\n    button: Button,\n    card: Card,\n    text: ITextInput,\n    itemId,\n    draggable: true,\n    onAddChild: (e) => {\n      const nextId = tree.getMaxId() + 1;\n\n      tree.setItem(nextId, '<new>');\n      tree.addNode(itemId, nextId);\n\n      // FIXME: Rerender\n      render();\n    },\n    onAddSibling: (e) => {\n      const nextId = tree.getMaxId() + 1;\n\n      tree.setItem(nextId, '<new>');\n      tree.addNode(parent.itemId, nextId);\n\n      // FIXME: Rerender\n      render();\n    },\n    onRemoveChild: (e) => {\n      tree.removeItem(itemId);\n\n      // FIXME: Rerender\n      render();\n    },\n    onMoveChild: (e) => {\n      e.preventDefault();\n      const src = JSON.parse(e.dataTransfer.getData('text/plain'));\n\n      try {\n        tree.moveNode(+src.itemId, itemId);\n        saveData();\n      } catch (e) {\n        alert(e.message);\n      }\n\n      // FIXME: Rerender\n      render();\n    },\n    onChange: (e) => {\n      tree.setItem(itemId, e.target.value);\n\n      saveData();\n    },\n    hasParent: parent !== false,\n    allowNext: true,\n  });\n};\n\ndocument.title = ui.title;\nclearHistory();\nrestoreData(unpack(loadData(), '[]'));\nrender();\n"],
  "mappings": "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",
  "names": []
}
