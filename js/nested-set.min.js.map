{
  "version": 3,
  "sources": ["../../src/nested-set.ts"],
  "sourcesContent": ["interface INode {\n  _id: number;\n  lkey: number;\n  rkey: number;\n  depth: number;\n  childs: number;\n  parentId: number;\n  itemId: number;\n}\n\ninterface INestedSet {\n  Structure: INode[];\n  Data: object;\n}\n\nclass NestedSet {\n  constructor() {\n    this.Structure = [];\n    this.Data = {};\n  }\n\n  setItem = (itemId: number, itemData: any) => {\n    this.Data[itemId] = itemData;\n    return this.Data[itemId];\n  };\n\n  getItem = (itemId: number) => this.Data[itemId];\n\n  removeItem = (itemId: number) => {\n    if (this.Data[itemId] !== undefined) {\n      for (var i = 0; i < this.Structure.length; i++) {\n        if (this.Structure[i].itemId === itemId) {\n          this.removeNode(this.Structure[i]._id);\n        }\n      }\n      delete this.Data[itemId];\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  addRoot = (itemId: number) => {\n    if (this.Data[itemId] !== undefined) {\n      this.removeNodes();\n      this.Structure.push({\n        _id: 1,\n        lkey: 1,\n        rkey: 2,\n        depth: 1,\n        childs: 0,\n        parentId: 0,\n        itemId: itemId,\n      });\n    }\n    return this.Structure[0]._id;\n  };\n\n  getRoot = () => this.getNodes()[0];\n\n  getMaxId = () =>\n    this.Structure.reduce(\n      (a, { _id }) => (a > _id ? a : _id),\n      -Infinity,\n    );\n\n  addNode = (targetNodeId: number, itemId: number) => {\n    if (this.Data[itemId] !== undefined) {\n      var parentNode = this.getNode(targetNodeId, true);\n\n      if (!parentNode) {\n        return false;\n      }\n\n      var maxId = this.getMaxId();\n\n      this.Structure = this.Structure.map((n) => {\n        if (n.lkey > parentNode.rkey) {\n          n.lkey += 2;\n          n.rkey += 2;\n        }\n        if (n.rkey >= parentNode.rkey && n.lkey < parentNode.rkey) {\n          n.rkey += 2;\n          n.childs++;\n        }\n        return n;\n      });\n\n      this.Structure.push({\n        _id: maxId + 1,\n        lkey: parentNode.rkey,\n        rkey: parentNode.rkey + 1,\n        depth: parentNode.depth + 1,\n        childs: 0,\n        parentId: parentNode._id,\n        itemId: itemId,\n      });\n\n      return maxId + 1;\n    }\n  };\n\n  getNode = (nodeId: number, asCopy: boolean) => {\n    var selectedNode = this.Structure.filter((n) => n._id === nodeId);\n    if (Array.isArray(selectedNode) && selectedNode.length === 1) {\n      if (asCopy === true) {\n        return { ...selectedNode[0] };\n      } else {\n        return selectedNode[0];\n      }\n    } else {\n      return false;\n    }\n  };\n\n  removeNode = (nodeId: number) => {\n    var selectedNode = this.getNode(nodeId, true);\n    var lengthBranchRem = this.getChilds(nodeId).length + 1;\n\n    if (!selectedNode) {\n      return false;\n    }\n\n    this.Structure = this.getNodes()\n      .map((n) => {\n        if (\n          n.rkey > selectedNode.rkey &&\n          n.lkey < selectedNode.lkey\n        ) {\n          n.childs = n.childs - lengthBranchRem;\n        }\n        return n;\n      })\n      .filter(\n        (n) =>\n          !(\n            n.lkey >= selectedNode.lkey && n.rkey <= selectedNode.rkey\n          ),\n      )\n      .map((n) => {\n        if (n.rkey > selectedNode.rkey) {\n          n.lkey =\n            n.lkey > selectedNode.lkey\n              ? n.lkey - (selectedNode.rkey - selectedNode.lkey + 1)\n              : n.lkey;\n          n.rkey =\n            n.rkey - (selectedNode.rkey - selectedNode.lkey + 1);\n        }\n        return n;\n      });\n\n    return this.Structure;\n  };\n\n  moveNode = (nodeId, targetNodeId) => {\n    var movedNode = this.getNode(nodeId, true);\n    var targetNode = this.getNode(targetNodeId, true);\n\n    var level = movedNode.depth;\n    var rightKey = movedNode.rkey;\n    var leftKey = movedNode.lkey;\n\n    var levelUp = targetNode.depth;\n    var rightKeyNear = targetNode.rkey - 1;\n\n    var skewLevel = levelUp - level + 1;\n    var skewTree = rightKey - leftKey + 1;\n\n    var skewEdit;\n\n    if (rightKeyNear > rightKey) {\n      skewEdit = rightKeyNear - leftKey + 1 - skewTree;\n      this.Structure = this.Structure.map((n) => {\n        if (n.lkey <= rightKeyNear && n.rkey > leftKey) {\n          if (n.rkey <= rightKey) {\n            n.lkey = n.lkey + skewEdit;\n          } else {\n            if (n.lkey > rightKey) {\n              n.lkey = n.lkey - skewTree;\n            }\n          }\n          if (n.rkey <= rightKey) {\n            n.depth = n.depth + skewLevel;\n          }\n          if (n.rkey <= rightKey) {\n            n.rkey = n.rkey + skewEdit;\n          } else {\n            if (n.rkey <= rightKeyNear) {\n              n.rkey = n.rkey - skewTree;\n            }\n          }\n        }\n\n        return n;\n      });\n    } else {\n      skewEdit = rightKeyNear - leftKey + 1;\n      this.Structure = this.Structure.map((n) => {\n        if (n.rkey > rightKeyNear && n.lkey < rightKey) {\n          if (n.lkey >= leftKey) {\n            n.rkey = n.rkey + skewEdit;\n          } else {\n            if (n.rkey < leftKey) {\n              n.rkey = n.rkey + skewTree;\n            }\n          }\n          if (n.lkey >= leftKey) {\n            n.depth = n.depth + skewLevel;\n          }\n          if (n.lkey >= leftKey) {\n            n.lkey = n.lkey + skewEdit;\n          } else {\n            if (n.lkey > rightKeyNear) {\n              n.lkey = n.lkey + skewTree;\n            }\n          }\n        }\n\n        return n;\n      });\n    }\n  };\n\n  getNodes = () => this.Structure.sort((a, b) => a.lkey - b.lkey);\n\n  removeNodes = () => {\n    this.Structure = [];\n  };\n\n  getParent = (nodeId) => {\n    var parents = this.getParents(nodeId);\n    return parents[parents.length - 1] === undefined\n      ? false\n      : parents[parents.length - 1];\n  };\n\n  getParents = (nodeId) => {\n    var parentNode = this.getNode(nodeId, true);\n    if (!parentNode) {\n      return [];\n    } else {\n      return this.getNodes()\n        .filter(\n          (n) => n.lkey < parentNode.lkey && n.rkey > parentNode.rkey,\n        )\n        .map((n) => {\n          n.data = this.Data[n.itemId];\n          return n;\n        });\n    }\n  };\n\n  getChilds = (nodeId, depth) => {\n    var parentNode = this.getNode(nodeId, true);\n    if (!parentNode) {\n      return [];\n    } else {\n      return this.getNodes()\n        .filter(\n          (n) =>\n            n.lkey >= parentNode.lkey &&\n            n.rkey <= parentNode.rkey &&\n            nodeId !== n._id &&\n            (depth === undefined\n              ? true\n              : n.depth <= parentNode.depth + depth),\n        )\n        .map((n) => {\n          n.data = this.Data[n.itemId];\n          return n;\n        });\n    }\n  };\n\n  getBranch = (nodeId) => {\n    var parentNode = this.getNode(nodeId);\n    if (!parentNode) {\n      return [];\n    } else {\n      return this.getNodes()\n        .filter(\n          (n) => n.rkey > parentNode.lkey && n.lkey < parentNode.rkey,\n        )\n        .map((n) => {\n          n.data = this.Data[n.itemId];\n          return n;\n        });\n    }\n  };\n\n  getTree = () =>\n    this.getNodes().map((n) => {\n      n.data = this.Data[n.itemId];\n      return n;\n    });\n\n  clearAll = () => {\n    this.Structure = [];\n    this.Data = {};\n  };\n\n  isRoot = (nodeId) => {\n    var selectedNode = this.getNode(nodeId);\n    return selectedNode && selectedNode.parentId === 0;\n  };\n\n  isBranch = (nodeId) => {\n    var selectedNode = this.getNode(nodeId);\n    return selectedNode && selectedNode.childs > 0;\n  };\n\n  isLeaf = (nodeId) => {\n    var selectedNode = this.getNode(nodeId);\n    return selectedNode && selectedNode.childs === 0;\n  };\n\n  getMaxRightKey = () =>\n    this.Structure.reduce(\n      (a, { rkey }) => (a > rkey ? a : rkey),\n      -Infinity,\n    );\n\n  getMaxLeftKey = () =>\n    this.Structure.reduce(\n      (a, { lkey }) => (a > lkey ? a : lkey),\n      -Infinity,\n    );\n\n  getCountNodes = () => this.Structure.length;\n\n  checkTree = () => {\n    var ruleLeftLessRight = this.Structure.filter(\n      (n) => n.lkey >= n.rkey,\n    );\n    var ruleModKeys = this.Structure.filter(\n      (n) => (n.rkey - n.lkey) % 2 === 0,\n    );\n    var ruleDepth = this.Structure.filter(\n      (n) => (n.lkey - n.depth + 2) % 2 === 1,\n    );\n\n    var errors = [];\n\n    if (ruleLeftLessRight.length !== 0) {\n      errors.push({\n        LeftLessRight: ruleLeftLessRight,\n      });\n    }\n    if (ruleModKeys.length !== 0) {\n      errors.push({\n        ModKeys: ruleModKeys,\n      });\n    }\n    if (ruleDepth.length !== 0) {\n      errors.push({\n        Depth: ruleDepth,\n      });\n    }\n\n    return errors;\n  };\n\n  debug = () =>\n    this.getNodes()\n      .map(\n        (n) =>\n          `${String(' ').repeat(n.depth + 1)}> ${JSON.stringify(\n            this.Data[n.itemId],\n          )}(itemId:${n.itemId}; nodeId:${n._id}; lkey:${\n            n.lkey\n          }; rkey:${n.rkey}; depth:${n.depth}; childs:${n.childs})`,\n      )\n      .join('\\n');\n}\n\nexport default NestedSet;\n"],
  "mappings": "MAeA,WAAgB,CACd,aAAc,CAKd,aAAU,CAAC,EAAgB,IACzB,MAAK,KAAK,GAAU,EACb,KAAK,KAAK,IAGnB,aAAU,AAAC,GAAmB,KAAK,KAAK,GAExC,gBAAa,AAAC,GAAmB,CAC/B,GAAI,KAAK,KAAK,KAAY,OAAW,CACnC,OAAS,GAAI,EAAG,EAAI,KAAK,UAAU,OAAQ,IACzC,AAAI,KAAK,UAAU,GAAG,SAAW,GAC/B,KAAK,WAAW,KAAK,UAAU,GAAG,KAGtC,aAAO,MAAK,KAAK,GACV,OAEP,OAAO,IAIX,aAAU,AAAC,GACL,MAAK,KAAK,KAAY,QACxB,MAAK,cACL,KAAK,UAAU,KAAK,CAClB,IAAK,EACL,KAAM,EACN,KAAM,EACN,MAAO,EACP,OAAQ,EACR,SAAU,EACV,OAAQ,KAGL,KAAK,UAAU,GAAG,KAG3B,aAAU,IAAM,KAAK,WAAW,GAEhC,cAAW,IACT,KAAK,UAAU,OACb,CAAC,EAAG,CAAE,SAAW,EAAI,EAAM,EAAI,EAC/B,MAGJ,aAAU,CAAC,EAAsB,IAAmB,CAClD,GAAI,KAAK,KAAK,KAAY,OAAW,CACnC,GAAI,GAAa,KAAK,QAAQ,EAAc,IAE5C,GAAI,CAAC,EACH,MAAO,GAGT,GAAI,GAAQ,KAAK,WAEjB,YAAK,UAAY,KAAK,UAAU,IAAI,AAAC,GAC/B,GAAE,KAAO,EAAW,MACtB,GAAE,MAAQ,EACV,EAAE,MAAQ,GAER,EAAE,MAAQ,EAAW,MAAQ,EAAE,KAAO,EAAW,MACnD,GAAE,MAAQ,EACV,EAAE,UAEG,IAGT,KAAK,UAAU,KAAK,CAClB,IAAK,EAAQ,EACb,KAAM,EAAW,KACjB,KAAM,EAAW,KAAO,EACxB,MAAO,EAAW,MAAQ,EAC1B,OAAQ,EACR,SAAU,EAAW,IACrB,OAAQ,IAGH,EAAQ,IAInB,aAAU,CAAC,EAAgB,IAAoB,CAC7C,GAAI,GAAe,KAAK,UAAU,OAAO,AAAC,GAAM,EAAE,MAAQ,GAC1D,MAAI,OAAM,QAAQ,IAAiB,EAAa,SAAW,EACrD,IAAW,GACN,IAAK,EAAa,IAElB,EAAa,GAGf,IAIX,gBAAa,AAAC,GAAmB,CAC/B,GAAI,GAAe,KAAK,QAAQ,EAAQ,IACpC,EAAkB,KAAK,UAAU,GAAQ,OAAS,EAEtD,MAAK,GAIL,MAAK,UAAY,KAAK,WACnB,IAAI,AAAC,GAEF,GAAE,KAAO,EAAa,MACtB,EAAE,KAAO,EAAa,MAEtB,GAAE,OAAS,EAAE,OAAS,GAEjB,IAER,OACC,AAAC,GACC,CACE,GAAE,MAAQ,EAAa,MAAQ,EAAE,MAAQ,EAAa,OAG3D,IAAI,AAAC,GACA,GAAE,KAAO,EAAa,MACxB,GAAE,KACA,EAAE,KAAO,EAAa,KAClB,EAAE,KAAQ,GAAa,KAAO,EAAa,KAAO,GAClD,EAAE,KACR,EAAE,KACA,EAAE,KAAQ,GAAa,KAAO,EAAa,KAAO,IAE/C,IAGJ,KAAK,WA/BH,IAkCX,cAAW,CAAC,EAAQ,IAAiB,CACnC,GAAI,GAAY,KAAK,QAAQ,EAAQ,IACjC,EAAa,KAAK,QAAQ,EAAc,IAExC,EAAQ,EAAU,MAClB,EAAW,EAAU,KACrB,EAAU,EAAU,KAEpB,EAAU,EAAW,MACrB,EAAe,EAAW,KAAO,EAEjC,EAAY,EAAU,EAAQ,EAC9B,EAAW,EAAW,EAAU,EAEhC,EAEJ,AAAI,EAAe,EACjB,GAAW,EAAe,EAAU,EAAI,EACxC,KAAK,UAAY,KAAK,UAAU,IAAI,AAAC,GAC/B,GAAE,MAAQ,GAAgB,EAAE,KAAO,GACrC,CAAI,EAAE,MAAQ,EACZ,EAAE,KAAO,EAAE,KAAO,EAEd,EAAE,KAAO,GACX,GAAE,KAAO,EAAE,KAAO,GAGlB,EAAE,MAAQ,GACZ,GAAE,MAAQ,EAAE,MAAQ,GAEtB,AAAI,EAAE,MAAQ,EACZ,EAAE,KAAO,EAAE,KAAO,EAEd,EAAE,MAAQ,GACZ,GAAE,KAAO,EAAE,KAAO,IAKjB,KAGT,GAAW,EAAe,EAAU,EACpC,KAAK,UAAY,KAAK,UAAU,IAAI,AAAC,GAC/B,GAAE,KAAO,GAAgB,EAAE,KAAO,GACpC,CAAI,EAAE,MAAQ,EACZ,EAAE,KAAO,EAAE,KAAO,EAEd,EAAE,KAAO,GACX,GAAE,KAAO,EAAE,KAAO,GAGlB,EAAE,MAAQ,GACZ,GAAE,MAAQ,EAAE,MAAQ,GAEtB,AAAI,EAAE,MAAQ,EACZ,EAAE,KAAO,EAAE,KAAO,EAEd,EAAE,KAAO,GACX,GAAE,KAAO,EAAE,KAAO,IAKjB,MAKb,cAAW,IAAM,KAAK,UAAU,KAAK,CAAC,EAAG,IAAM,EAAE,KAAO,EAAE,MAE1D,iBAAc,IAAM,CAClB,KAAK,UAAY,IAGnB,eAAY,AAAC,GAAW,CACtB,GAAI,GAAU,KAAK,WAAW,GAC9B,MAAO,GAAQ,EAAQ,OAAS,KAAO,OACnC,GACA,EAAQ,EAAQ,OAAS,IAG/B,gBAAa,AAAC,GAAW,CACvB,GAAI,GAAa,KAAK,QAAQ,EAAQ,IACtC,MAAK,GAGI,KAAK,WACT,OACC,AAAC,GAAM,EAAE,KAAO,EAAW,MAAQ,EAAE,KAAO,EAAW,MAExD,IAAI,AAAC,GACJ,GAAE,KAAO,KAAK,KAAK,EAAE,QACd,IARJ,IAaX,eAAY,CAAC,EAAQ,IAAU,CAC7B,GAAI,GAAa,KAAK,QAAQ,EAAQ,IACtC,MAAK,GAGI,KAAK,WACT,OACC,AAAC,GACC,EAAE,MAAQ,EAAW,MACrB,EAAE,MAAQ,EAAW,MACrB,IAAW,EAAE,KACZ,KAAU,OACP,GACA,EAAE,OAAS,EAAW,MAAQ,IAErC,IAAI,AAAC,GACJ,GAAE,KAAO,KAAK,KAAK,EAAE,QACd,IAdJ,IAmBX,eAAY,AAAC,GAAW,CACtB,GAAI,GAAa,KAAK,QAAQ,GAC9B,MAAK,GAGI,KAAK,WACT,OACC,AAAC,GAAM,EAAE,KAAO,EAAW,MAAQ,EAAE,KAAO,EAAW,MAExD,IAAI,AAAC,GACJ,GAAE,KAAO,KAAK,KAAK,EAAE,QACd,IARJ,IAaX,aAAU,IACR,KAAK,WAAW,IAAI,AAAC,GACnB,GAAE,KAAO,KAAK,KAAK,EAAE,QACd,IAGX,cAAW,IAAM,CACf,KAAK,UAAY,GACjB,KAAK,KAAO,IAGd,YAAS,AAAC,GAAW,CACnB,GAAI,GAAe,KAAK,QAAQ,GAChC,MAAO,IAAgB,EAAa,WAAa,GAGnD,cAAW,AAAC,GAAW,CACrB,GAAI,GAAe,KAAK,QAAQ,GAChC,MAAO,IAAgB,EAAa,OAAS,GAG/C,YAAS,AAAC,GAAW,CACnB,GAAI,GAAe,KAAK,QAAQ,GAChC,MAAO,IAAgB,EAAa,SAAW,GAGjD,oBAAiB,IACf,KAAK,UAAU,OACb,CAAC,EAAG,CAAE,UAAY,EAAI,EAAO,EAAI,EACjC,MAGJ,mBAAgB,IACd,KAAK,UAAU,OACb,CAAC,EAAG,CAAE,UAAY,EAAI,EAAO,EAAI,EACjC,MAGJ,mBAAgB,IAAM,KAAK,UAAU,OAErC,eAAY,IAAM,CAChB,GAAI,GAAoB,KAAK,UAAU,OACrC,AAAC,GAAM,EAAE,MAAQ,EAAE,MAEjB,EAAc,KAAK,UAAU,OAC/B,AAAC,GAAO,GAAE,KAAO,EAAE,MAAQ,IAAM,GAE/B,EAAY,KAAK,UAAU,OAC7B,AAAC,GAAO,GAAE,KAAO,EAAE,MAAQ,GAAK,IAAM,GAGpC,EAAS,GAEb,MAAI,GAAkB,SAAW,GAC/B,EAAO,KAAK,CACV,cAAe,IAGf,EAAY,SAAW,GACzB,EAAO,KAAK,CACV,QAAS,IAGT,EAAU,SAAW,GACvB,EAAO,KAAK,CACV,MAAO,IAIJ,GAGT,WAAQ,IACN,KAAK,WACF,IACC,AAAC,GACC,GAAG,OAAO,KAAK,OAAO,EAAE,MAAQ,OAAO,KAAK,UAC1C,KAAK,KAAK,EAAE,mBACF,EAAE,kBAAkB,EAAE,aAChC,EAAE,cACM,EAAE,eAAe,EAAE,iBAAiB,EAAE,WAEnD,KAAK;AAAA,GAnWR,KAAK,UAAY,GACjB,KAAK,KAAO,KAqWT,EAAQ",
  "names": []
}
